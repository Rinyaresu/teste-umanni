# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/posts' do
  let(:valid_attributes) { attributes_for(:post) }
  let(:invalid_attributes) { attributes_for(:invalid_post) }

  describe 'CRUD as a visitor' do
    describe 'GET /index' do
      it 'renders a successful response' do
        Post.create! valid_attributes
        get posts_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        post = Post.create! valid_attributes
        get post_url(post)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'redirects to login' do
        get new_post_url
        expect(response).to have_http_status(:found)
      end
    end

    describe 'GET /edit' do
      it 'redirects to login' do
        post = Post.create! valid_attributes
        get edit_post_url(post)
        expect(response).to have_http_status(:found)
      end
    end

    describe 'POST /create' do
      it 'redirects to login' do
        expect do
          post posts_url, params: { post: valid_attributes }
        end.not_to change(Post, :count)
        expect(response).to have_http_status(:found)
      end
    end

    describe 'PATCH /update' do
      it 'redirects to login' do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: valid_attributes }
        expect(response).to have_http_status(:found)
      end
    end

    describe 'DELETE /destroy' do
      it 'redirects to login' do
        post = Post.create! valid_attributes
        expect do
          delete post_url(post)
        end.not_to change(Post, :count)
        expect(response).to have_http_status(:found)
      end
    end
  end

  describe 'CRUD as user' do
    before do
      user = create(:user)
      login_as(user)
    end

    describe 'GET /index' do
      it 'renders a successful response' do
        Post.create! valid_attributes
        get posts_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        post = Post.create! valid_attributes
        get post_url(post)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_post_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a redirect response unless the post is from user' do
        post = create(:post)
        get edit_post_url(post)
        expect(response).to be_redirect
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new Post' do
          expect do
            post posts_url, params: { post: valid_attributes }
          end.to change(Post, :count).by(1)
        end

        it 'redirects to the created post' do
          post posts_url, params: { post: valid_attributes }
          expect(response).to redirect_to(post_url(Post.last))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Post' do
          expect do
            post posts_url, params: { post: invalid_attributes }
          end.not_to change(Post, :count)
        end

        it 'renders a response with 422 status' do
          post posts_url, params: { post: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end

    describe 'If the user is not the creator' do
      describe 'cannot PATCH /update' do
        context 'with valid parameters' do
          let(:new_attributes) { attributes_for(:post) }

          it 'cannot updates the requested post' do
            post = Post.create! valid_attributes
            patch post_url(post), params: { post: new_attributes }
            post.reload
            expect(post.title).to eq(valid_attributes[:title])
          end

          it 'redirects to the posts' do
            post = Post.create! valid_attributes
            patch post_url(post), params: { post: new_attributes }
            post.reload
            expect(response).to redirect_to(root_path)
          end
        end

        context 'with invalid parameters' do
          it 'renders a response with found status' do
            post = Post.create! valid_attributes
            patch post_url(post), params: { post: invalid_attributes }
            expect(response).to have_http_status(:found)
          end
        end
      end

      describe 'DELETE /destroy' do
        it 'cannot destroys the requested post' do
          post = Post.create! valid_attributes
          expect do
            delete post_url(post)
          end.not_to change(Post, :count)
        end

        it 'cannot redirects to the posts list' do
          post = Post.create! valid_attributes
          delete post_url(post)
          expect(response).to redirect_to(root_path)
        end
      end
    end
  end
end
